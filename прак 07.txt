import java.util.Scanner;

interface CostCalculationStrategy {
    double calculateCost(double distance, int passengers, String serviceClass);
}

class AirplaneCostStrategy implements CostCalculationStrategy {
    @Override
    public double calculateCost(double distance, int passengers, String serviceClass) {
        double baseCost = distance * 1.5; 
        if (serviceClass.equalsIgnoreCase("бизнес")) {
            baseCost *= 2; 
        }
        return baseCost * passengers;
    }
}

class TrainCostStrategy implements CostCalculationStrategy {
    @Override
    public double calculateCost(double distance, int passengers, String serviceClass) {
        double baseCost = distance * 1.0; 
        if (serviceClass.equalsIgnoreCase("бизнес")) {
            baseCost *= 1.5; 
        }
        return baseCost * passengers;
    }
}

class BusCostStrategy implements CostCalculationStrategy {
    @Override
    public double calculateCost(double distance, int passengers, String serviceClass) {
        double baseCost = distance * 0.5; 
        return baseCost * passengers;
    }
}

class BookingContext {
    private CostCalculationStrategy strategy;

    public void setStrategy(CostCalculationStrategy strategy) {
        this.strategy = strategy;
    }

    public double calculateTripCost(double distance, int passengers, String serviceClass) {
        if (strategy == null) {
            throw new IllegalStateException("Стратегия не установлена");
        }
        return strategy.calculateCost(distance, passengers, serviceClass);
    }
}

public class BookingApplication {
    public static void main(String[] args) {
        BookingContext context = new BookingContext();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Выберите транспорт: 1 - Самолет, 2 - Поезд, 3 - Автобус");
        int transportChoice = scanner.nextInt();

        CostCalculationStrategy strategy;
        switch (transportChoice) {
            case 1:
                strategy = new AirplaneCostStrategy();
                break;
            case 2:
                strategy = new TrainCostStrategy();
                break;
            case 3:
                strategy = new BusCostStrategy();
                break;
            default:
                System.out.println("Некорректный выбор транспорта.");
                return;
        }

        context.setStrategy(strategy);

        System.out.println("Введите расстояние (км): ");
        double distance = scanner.nextDouble();

        System.out.println("Введите количество пассажиров: ");
        int passengers = scanner.nextInt();

        System.out.println("Введите класс обслуживания (эконом, бизнес): ");
        String serviceClass = scanner.next();

        double totalCost = context.calculateTripCost(distance, passengers, serviceClass);
        System.out.printf("Общая стоимость поездки: %.2f%n", totalCost);

        scanner.close();
    }
}


Выберите транспорт: 1 - Самолет, 2 - Поезд, 3 - Автобус
1
Введите расстояние (км): 
2.5
Введите количество пассажиров: 
2
Введите класс обслуживания (эконом, бизнес): 
эканом
Общая стоимость поездки: 7.50


