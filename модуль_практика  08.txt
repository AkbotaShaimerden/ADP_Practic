// command
interface Command {
    void execute();
    void undo();
}

class Light {
    void on() {
        System.out.println("Light ВКЛ");
    }

    void off() {
        System.out.println("Light ВЫКЛ");
    }
}

class AirConditioner {
    void on() {
        System.out.println("Air Conditioner ВКЛ");
    }

    void off() {
        System.out.println("Air Conditioner ВЫКЛ");
    }
}

class TV {
    void on() {
        System.out.println("TV ВКЛ");
    }

    void off() {
        System.out.println("TV ВЫКЛ");
    }
}

class LightOnCommand implements Command {
    private Light light;

    LightOnCommand(Light light) {
        this.light = light;
    }

    @Override
    public void execute() {
        light.on();
    }

    @Override
    public void undo() {
        light.off();
    }
}

class AirConditionerOnCommand implements Command {
    private AirConditioner ac;

    AirConditionerOnCommand(AirConditioner ac) {
        this.ac = ac;
    }

    @Override
    public void execute() {
        ac.on();
    }

    @Override
    public void undo() {
        ac.off();
    }
}

class TVOnCommand implements Command {
    private TV tv;

    TVOnCommand(TV tv) {
        this.tv = tv;
    }

    @Override
    public void execute() {
        tv.on();
    }

    @Override
    public void undo() {
        tv.off();
    }
}

class RemoteControl {
    private Command[] onCommands;
    private Command[] offCommands;
    private Command undoCommand;

    RemoteControl() {
        onCommands = new Command[7];
        offCommands = new Command[7];
        undoCommand = null;
    }

    void setCommand(int slot, Command onCommand, Command offCommand) {
        onCommands[slot] = onCommand;
        offCommands[slot] = offCommand;
    }

    void onButtonWasPressed(int slot) {
        if (onCommands[slot] != null) {
            onCommands[slot].execute();
            undoCommand = onCommands[slot];
        } else {
            System.out.println("Не назначена команда.");
        }
    }

    void offButtonWasPressed(int slot) {
        if (offCommands[slot] != null) {
            offCommands[slot].execute();
            undoCommand = offCommands[slot];
        } else {
            System.out.println("Не назначена команда.");
        }
    }

    void undoButtonWasPressed() {
        if (undoCommand != null) {
            undoCommand.undo();
        } else {
            System.out.println("Ничего нельзя отменить.");
        }
    }
}

class MacroCommand implements Command {
    private Command[] commands;

    MacroCommand(Command[] commands) {
        this.commands = commands;
    }

    @Override
    public void execute() {
        for (Command command : commands) {
            command.execute();
        }
    }

    @Override
    public void undo() {
        for (Command command : commands) {
            command.undo();
        }
    }
}

public class SmartHomeDemo {
    public static void main(String[] args) {
        RemoteControl remote = new RemoteControl();
        Light livingRoomLight = new Light();
        AirConditioner ac = new AirConditioner();
        TV tv = new TV();

        LightOnCommand lightOn = new LightOnCommand(livingRoomLight);
        AirConditionerOnCommand acOn = new AirConditionerOnCommand(ac);
        TVOnCommand tvOn = new TVOnCommand(tv);

        Command[] partyMode = {lightOn, acOn, tvOn};
        MacroCommand macroCommand = new MacroCommand(partyMode);

        // Use macro command to turn on all devices
        System.out.println("Turning on all devices for party mode:");
        macroCommand.execute();
        
        // Undo macro command
        System.out.println("Undoing party mode:");
        macroCommand.undo();
    }
}




// шаблон
abstract class ReportGenerator {
    public final void generateReport() {
        gatherData();
        formatReport();
        if (customerWantsToSave()) {
            saveReport();
        }
        if (customerWantsToEmail()) {
            emailReport();
        }
        System.out.println("Отчет завершен.\n");
    }
    protected abstract void gatherData();
    protected abstract void formatReport();
    protected void saveReport() {
        System.out.println("Сохранение отчета в файл.");
    }
    protected void emailReport() {
        System.out.println("Отправка отчета по электронной почте.");
    }
    protected boolean customerWantsToSave() {
        return true;
    }
    protected boolean customerWantsToEmail() {
        return false;
    }
}

class PdfReport extends ReportGenerator {
    @Override
    protected void gatherData() {
        System.out.println("Сбор данных для PDF отчета.");
    }

    @Override
    protected void formatReport() {
        System.out.println("Форматирование отчета в PDF.");
    }

    @Override
    protected boolean customerWantsToEmail() {
        return true; 
    }
}

class ExcelReport extends ReportGenerator {
    @Override
    protected void gatherData() {
        System.out.println("Сбор данных для Excel отчета.");
    }

    @Override
    protected void formatReport() {
        System.out.println("Форматирование отчета в Excel.");
    }

    @Override
    protected boolean customerWantsToSave() {
        return true;
    }
}

public class TemplateMethodDemo {
    public static void main(String[] args) {
        ReportGenerator pdfReport = new PdfReport();
        ReportGenerator excelReport = new ExcelReport();

        System.out.println("Генерация PDF отчета:");
        pdfReport.generateReport();

        System.out.println("Генерация Excel отчета:");
        excelReport.generateReport();
    }
}


// посредник
import java.util.ArrayList;
import java.util.List;

interface Mediator {
    void sendMessage(String message, Colleague colleague);
    void addColleague(Colleague colleague);
}

abstract class Colleague {
    protected Mediator mediator;

    public Colleague(Mediator mediator) {
        this.mediator = mediator;
    }

    public abstract void receiveMessage(String message);
}

class ChatMediator implements Mediator {
    private List<Colleague> colleagues;

    public ChatMediator() {
        this.colleagues = new ArrayList<>();
    }

    @Override
    public void addColleague(Colleague colleague) {
        colleagues.add(colleague);
    }

    @Override
    public void sendMessage(String message, Colleague sender) {
        for (Colleague colleague : colleagues) {
            if (colleague != sender) {
                colleague.receiveMessage(message);
            }
        }
    }
}

class User extends Colleague {
    private String name;

    public User(Mediator mediator, String name) {
        super(mediator);
        this.name = name;
    }

    public void send(String message) {
        System.out.println(name + " отправляет сообщение: " + message);
        mediator.sendMessage(message, this);
    }

    @Override
    public void receiveMessage(String message) {
        System.out.println(name + " получил сообщение: " + message);
    }
}

public class ChatApp {
    public static void main(String[] args) {
        ChatMediator mediator = new ChatMediator();
        User user1 = new User(mediator, "Алина");
        User user2 = new User(mediator, "Барис");

        mediator.addColleague(user1);
        mediator.addColleague(user2);

        user1.send("Привет всем!");
        user2.send("Привет, Алина!");
    }
}
